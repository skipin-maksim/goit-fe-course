{"version":3,"sources":["webpack:///./task-1.js","webpack:///./task-2.js","webpack:///./task-3.js"],"names":["colors","id","isActive","refs","startBtn","document","querySelector","stopBtn","body","addEventListener","setAttribute","setInterval","min","max","getColorInx","length","Math","floor","random","style","backgroundColor","removeAttribute","clearInterval","delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","loggerTaskTwo","table","makeTransaction","transaction","reject","logSuccess","logError","warn","amount","catch","dateTarget","timer","selector","targetDate","this","Date","day","hours","mins","secs","pad","val","String","padStart","getTime","days","dateCurrent","now","textContent"],"mappings":"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","file":"main.72fa5f3265bde8f8cdaf.js","sourcesContent":["const colors = [\r\n  '#FFFFFF',\r\n  '#2196F3',\r\n  '#4CAF50',\r\n  '#FF9800',\r\n  '#009688',\r\n  '#795548',\r\n];\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\nlet id = null;\r\nlet isActive = false;\r\n\r\nconst refs = {\r\n  startBtn: document.querySelector('[data-action=\"start\"]'),\r\n  stopBtn: document.querySelector('[data-action=\"stop\"]'),\r\n  body: document.querySelector('body'),\r\n};\r\n\r\nrefs.startBtn.addEventListener('click', changeColorBody);\r\nrefs.stopBtn.addEventListener('click', stopChangeColorBody);\r\n\r\nfunction changeColorBody() {\r\n  if (isActive) {\r\n    return;\r\n  }\r\n\r\n  isActive = true;\r\n  refs.startBtn.setAttribute('disabled', true);\r\n\r\n  id = setInterval(() => {\r\n    const getColorInx = randomIntegerFromInterval(0, colors.length - 1);\r\n\r\n    refs.body.style.backgroundColor = colors[getColorInx];\r\n  }, 1000);\r\n}\r\n\r\nfunction stopChangeColorBody() {\r\n  isActive = false;\r\n  refs.startBtn.removeAttribute('disabled');\r\n\r\n  clearInterval(id);\r\n}\r\n","// //======================================== task-1 START\r\nconst delay = ms => {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve(ms);\r\n    }, ms);\r\n  });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n\r\n//======================================== task-1 END\r\n\r\n//======================================== task-2 START');\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  const updatedUsers = allUsers.map(user =>\r\n    user.name === userName ? { ...user, active: !user.active } : user,\r\n  );\r\n\r\n  return new Promise(resolve => {\r\n    resolve(updatedUsers);\r\n  });\r\n};\r\n\r\nconst loggerTaskTwo = updatedUsers => console.table(updatedUsers);\r\n\r\n//! Должно работать так\r\n\r\ntoggleUserState(users, 'Mango').then(loggerTaskTwo);\r\ntoggleUserState(users, 'Lux').then(loggerTaskTwo);\r\n\r\n//======================================== task-2 END\r\n\r\n//======================================== task-3 START\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n      if (canProcess) {\r\n        resolve({ id: transaction.id, time: delay });\r\n      } else {\r\n        reject({ id: transaction.id });\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = ({ id }) => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n//! Должно работать так\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\n//======================================== task-3 END\r\n","class CountdownTimer {\r\n  constructor({ selector, targetDate }) {\r\n    this.selector = selector;\r\n    this.targetDate = targetDate;\r\n  }\r\n}\r\n\r\nconst timer = new CountdownTimer({\r\n  selector: '#timer-1',\r\n  targetDate: new Date('Aug 13, 2020'),\r\n});\r\n\r\nconst refs = {\r\n  day: document.querySelector('[data-value=\"days\"]'),\r\n  hours: document.querySelector('[data-value=\"hours\"]'),\r\n  mins: document.querySelector('[data-value=\"mins\"]'),\r\n  secs: document.querySelector('[data-value=\"secs\"]'),\r\n};\r\n\r\nfunction pad(val) {\r\n  return String(val).padStart(2, '0');\r\n}\r\n\r\nfunction updateTimer(time) {\r\n  /*\r\n   * Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\r\n   * миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\r\n   */\r\n  const days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\r\n  /*\r\n   * Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\r\n   * остатка % и делим его на количество миллисекунд в одном часе\r\n   * (1000 * 60 * 60 = миллисекунды * минуты * секунды)\r\n   */\r\n  const hours = pad(\r\n    Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\r\n  );\r\n  /*\r\n   * Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\r\n   * миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\r\n   */\r\n  const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n  /*\r\n   * Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\r\n   * миллисекунд в одной секунде (1000)\r\n   */\r\n  const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\r\n\r\n  refs.day.textContent = days;\r\n  refs.hours.textContent = hours;\r\n  refs.mins.textContent = mins;\r\n  refs.secs.textContent = secs;\r\n}\r\n\r\nfunction timerA() {\r\n  const dateTarget = timer.targetDate.getTime();\r\n\r\n  setInterval(() => {\r\n    const dateCurrent = Date.now();\r\n    updateTimer(dateTarget - dateCurrent);\r\n  }, 1000);\r\n}\r\n\r\ntimerA();\r\n"],"sourceRoot":""}